chapter 8

> 인라인함수
	- 컴파일 단계에서 메인 코드에 함수 내용이 추가된다.
	- 일반 함수호출 -> 메모리공간, 호출 시간 소모
	- 인라인 사용시 코드가 길어져 많은 메모리 공간을 사용한다.
	- 인라인 함수 -> 전처리단계 아니다, 쓰는건 전처리 다음에 작성할 것

> 참조변수 (&)
	- 포인터와 비슷하지만 포인터는 아니다!
	- 변수에 별명 붙이기, 함수 매개변수 전달할때 유용하게 사용 할 수 있다.
	- 참조변수는 선언과 동시에 초기화 해야한다.
	- 포인터는 목표의 주소값을 저장하는 공간이 있지만, 참조변수는 그것도 없이 별명만 가진다.
	- 같은변수 다른이름!
	- 당연하지만 원본을 유지할 경우 쓸 생각도 하지 말 것
	- 매개변수 전달시 타입이 안맞거나, 상수값을 넣거나, 계산식이 들어가는 경우 임시변수가 생성
	- 임시변수가 생성될 경우 원본에는 영향을 미치지 않는다.
	- 최근 c++ 컴파일러는 임시변수 생성을 허용하지 않는다.
	- 참조 리턴시 const사용 참조한 값에 대입연산을 막기 위해서

> 매개변수의 기본형
	- 매개변수의 기본형은 뒤쪽부터 채워넣는다
	- 함수 오버로딩 사용시 기본형 사용에 유의할것, 모호해질 수 있다.

> 함수 오버로딩
	- 같은 이름의 함수를 매개변수 종류, 갯수로 구분을 줘 다른 함수처럼 사용할 수 있다.
	- 이름장식(Name Decoration) || Name mangling
		-> 컴파일러는 함수 원형에 지정된 형시 매개변수의 데이터형을 기반으로
		    각각의 함수 이름을 암호화 한다.

> 함수 템플릿
	- template <typename T, typename T2 ...>
	- 함수의 자료형을 함수 호출부에서 지정해서 함수를 만들어 준다.
	- 