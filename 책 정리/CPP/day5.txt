chapter6

if 구문
- 조건을 평가한 결과가 참이면 그 다음에 오는 하나의 구문 또는 구문 블록을 수행하고
결과가 거짓이면 그것들을 무시하고 건너뛴다. 
if else 구문
- 두개의 구문, 혹은 블록중에서 어느쪽을 수행할 것인지 조건에 따라 결정한다.
서로 다른 작업 경로를 선택하는 경우에 사용된다.

논리 표현식
- 논리합 OR(||) or연산 수행, 시퀀스 포인트로 작용하여 좌변에 지시된 값의 변경은 우변이
평가되기 전에 일어난다. 
ex) (i++ < 6 || i == j)와 같은 식의 경우 우변의 비교연산 전 이미 i는 ++연산되어 1이 증가한 값이다.
또한 좌변이 참일경우 우변은 확인하지도 않는다.

- 논리곱 AND(&&) and연산, ||연산과 마찬가지로 스퀀스 포인트로 작용한다.

- 논리부정 NOT(!) not연산, 보통 true, false값을 리턴하는 함수와 사용하면 매우 유용하다.

&&연산자와 ||연산자는 관계 연산자보다 우선순위가 낮다. 따라서 x> 5 && x< 10 연산은
(x>5) && (x<10)와 같이 인식 된다. 하지만 사용자의 의도를 정확하게 알리기 위해서 괄호를 사용하자.
and, or, not으로 대체 표기할 수 있다.

cctype 라이브러리
- isalpha, ispunct(구두점 판단), isdigit

? 연산자
조건연산자, 피연산자를 3개 사용하는 유일한 연산자로 ㅁ ? ㅁ : ㅁ 같은 형식으로 사용한다.
코드가 이해하기 쉬운가를 따지는 독이성 측ㄹ면에서 조건 연산자는 간단한 관계식이나, 간단한 표현식의
값을 나타내는 데에 가장 적당하다. --> 코드가 복잡할 경우 if else문을 사용하는 것이 명확하다.

switch 구문
각각의 case레이블은 행 레이블로만 작용하고 선택의 경계로는 작용하지 않는다. 따라서 프로그램이 
점프하고 난뒤 명시적으로 흐름을 제어해야 한다 break문 등으로 제어. break문이 없을경우 뒤로 넘어가는
특성을 활용하여 같은 처리를 하는 case문 끼리 묶어서 처리할 있다. --> 일반적으로 선택사항이 정수형
상수로 인식될 수 있다면, switch문이 효율적인 경우가 많다.

break문, continue문
continue문은 루프 몸체의 나머지를 무시하고 새로운 루프 주기를 시작 하게 만든다. (루프문에서만 사용)
break문은 구문을 종료하고 빠져 나온다.

수를 읽는 루프
int n;
cin>>n;
숫자대신 문자를 입력할 경우
1. n값은 변하지 않는다.
2. 입력 큐에 잘못된 입력이 그대로 유지된다.
3. cin객체의 에러 플래그 설정된다.
4. cin메서드 호출이 false(bool형으로 변환된다면)를 리턴한다.
반복조건에 cin함수를 사용할 경우 저장하는 변수의 자료형과 다른 자료형이 들어올 경우 false리턴

파일 입출력
헤더 iostream 추가
fstream 파일 출력
istream 파일 입력

